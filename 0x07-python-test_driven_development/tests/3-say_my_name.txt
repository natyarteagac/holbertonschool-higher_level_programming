The ``3-say_my_name`` module
==============================

Using ``say_my_name``
---------------------

First is an example text file in reStructuredText format. First import
``say_my_name`` from the ``3-say_my_name`` module:

    >>> say_my_name = __import__('3-say_my_name').say_my_name

Now use it:
    >>> say_my_name(4, "Sanchez")
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string

    >>> say_my_name("Carolina", None)
    Traceback (most recent call last):
    ...
    TypeError: last_name must be a string

    >>> say_my_name("Samantha")
    My name is Samantha 

    >>> say_my_name("","")
    My name is  

    >>> say_my_name("Manuela", 5)
    Traceback (most recent call last):
    ...
    TypeError: last_name must be a string

    >>> say_my_name(None, "Mendez")
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string

    # Checking pep8 style
    >>> import os
    >>> os.popen("pep8 3-say_my_name.py").read()
    ''

    # Checking comments
    >>> comments = __import__('3-say_my_name').__doc__
    >>> len(comments) > 4
    True

    # Checking comments
    >>> comments = __import__('3-say_my_name').__doc__
    >>> len(comments) > 2
    True

    #Checking (newline to the end)
    >>> with open('3-say_my_name.py', "r") as file:
    ...     for last_line in file:
    ...             pass
    ...
    >>> last_line[-1] == '\n'
    True

    # Checking (shebang)
    >>> with open('3-say_my_name.py', "r") as file:
    ...     first_line = file.readline()
    >>> first_line == '#!/usr/bin/python3\n'
    True

    # Checking Executable
    >>> import os
    >>> pathfile = os.getcwd() + '/3-say_my_name.py'
    >>> os.access(pathfile, os.X_OK)
    True

    # Checking README
    >>> import os
    >>> os.path.exists('README.md')
    True

    # Checking if README is empty
    >>> import os
    >>> pathfile = os.getcwd() + 'README.md'
    >>> os.stat('README.md').st_size == 0
    False